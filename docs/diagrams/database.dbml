Project db_bg_cell_testing {
  database_type: 'PostgreSQL'
  Note: 
  '''
  Database schema for storing battery cycler test data. Tightly coupled with [battetl](https://github.com/battGenie/battetl), though can be used to store data from other sources. 
  '''
}
Table public.cells {
    cell_id int [pk, not null, increment, note: "Unique identifier for the cell instance. Auto-incremented upon insertion."]
    cell_type_id int [ref: > public.cells_meta.cell_type_id, unique, note: "Refers to the make of the cell defined in cells_meta table."]
    batch_number text [note: "Batch number of the cells from manufacturer."]
    label text [unique, note: "The label written on the cell for internal use."]
    date_received date [note: "Date the cell was received by the lab."]
    comments text [note: "Any comments about the cell."]
    date_manufactured date [note: "Date the cell was created by the manufacturer."]
    manufacture_sn text [note: "Manufacturer's serial number of the cell printed on the cell."]
    dimensions "jsonb" [note: "Dimensions of the cell instance. For pouch cells, H x W x L in mm. For cyclindrical cells, r x H in mm. For example, '{\"x_mm\":\"54.25\", \"y_mm\":106.96, \"z_mm\":3.19}' for a pouch cell and '{\"x_mm\":\"54.25\", \"y_mm\":106.96, \"z_mm\":3.19}' for a cyclindrical cell."]
    weight_g "real" [note: "Weight in grams."]
    first_received_at_voltage_mv "real" [note: "Voltage of the cell prior to testing."]
    note: "Stores information for cell instances. [audited]"
}
Table public.cells_meta {
    cell_type_id int [pk, not null, increment, note: "Unique identifier for the cell type. Auto-incremented upon insertion."]
    manufacturer text [note: "Manufacturer of the cell."]
    manufacturer_pn text [note: "Part number of the cell from the manufacturer."]
    form_factor text [note: "Geometry of the cell, e.g. cylindrical, pouch, prismatic, coin."]
    capacity_mah int [note: "Rated capacity of the cell in mAh."]
    chemistry text [note: "Electrode and electrolyte material."]
    dimensions "jsonb" [note: "Dimensions of the cell type. For pouch cells, H x W x L in mm. For cyclindrical cells, r x H in mm. For example, '{\"x_mm\":\"54.25\", \"y_mm\":106.96, \"z_mm\":3.19}' for a pouch cell and '{\"x_mm\":\"54.25\", \"y_mm\":106.96, \"z_mm\":3.19}' for a cyclindrical cell."]
    note: "Stores information for types of cells. [audited]"
}
Table public.customers {
    customer_id int [pk, not null, increment, note: "Unique identifier for the customer. Auto-incremented upon insertion."]
    customer_name text
    note: "Tracks customers. [audited]"
}
Table public.cyclers {
    cycler_id int [pk, not null, increment, note: "Unique identifier for the cycler instance. Auto-incremented upon insertion."]
    cycler_type_id int [ref: > public.cyclers_meta.cycler_type_id, note: "Refers to the make of the cycler defined in cyclers_meta table."]
    sn text [note: "Serial number of the cycler from the manufacturer."]
    calibration_date date [note: "Date of last calibration."]
    calibration_due_date date [note: "Date of next calibration."]
    location text [note: "Lab where cycler is located."]
    timezone_based text [note: "Timezone where the cycler is located."]
    note: "Stores information for cycler instances."
}
Table public.cyclers_meta {
    cycler_type_id int [pk, not null, increment, note: "Unique identifier for the cycler type. Auto-incremented upon insertion."]
    manufacturer text [note: "Manufacturer of the cycler."]
    model text [note: "Model of the cycler."]
    datasheet text
    num_channels "smallint" [note: 'Number of channels in the cycler.']
    lower_current_limit_a numeric
    upper_current_limit_a numeric
    lower_voltage_limit_v numeric
    upper_voltage_limit_v numeric
    note: "Stores information for types of cycler."
}
Table public.flyway_schema_history {
    installed_rank int [pk, not null]
    version varchar(50)
    description varchar(200) [not null]
    type varchar(20) [not null]
    script varchar(1000) [not null]
    checksum int 
    installed_by varchar(100) [not null]
    installed_on timestamp [not null, default: 'now()']
    execution_time int [not null]
    success boolean [not null]
    note: "[DND] This Table is auto-generated and maintained by [flyway](https://flywaydb.org/). It tracks Flyway migrations applied to the database. *Currently, flyway is only used to make schema changes in BattDB (DDL), though it can be used to make changes to data (DML) or control (DCL)*. More details about this table's schema and data can be found [here](https://www.red-gate.com/hub/product-learning/flyway/exploring-the-flyway-schema-history-table)."
}
Table public.eis_data {
    potentiostat_id int [pk, not null, increment, note: 'Unique identifier for the potentiostat data point. Auto-incremented upon insertion.']
    test_id int [ref: > public.test_meta.test_id]
    cycle int [note: 'The test cycle the EIS measurement was made at.']
    step int [note: 'The test step the EIS masurement was made at.']
    soc numeric [note: 'The state of charge (SoC) the EIS measurement was made at.']
    freq_hz numeric [note: ' The frequency of the EIS pulse.']
    time_s numeric [note: 'The test time the EIS measurement was made at.']
    z_real_ohms numeric [note: 'The real part of the measured EIS impedance.']
    z_imaginary_ohms numeric [note: 'The imaginary part of the measured EIS impedance.']
    inverse_z_imaginary numeric
    phase_angle_degree numeric [note: 'The phase angle of the measured EIS impedance.']
    capacitance_farad numeric [note: 'The capacitance of the EIS measurement.']
    voltage_magnitude_mv numeric
    current_magnitude_ma numeric
    note: "Stores potentiostat test data."
}
Table public.eis_meta {
    eis_id int [pk, not null, increment, note: 'Unique identifier for the EIS test. Auto-incremented upon insertion.']
    file_name text [unique, note: 'file name that defines the EIS setup.']
    mode text [note: 'The mode of the EIS measurement can be galvanostatic and potentiostatic.']
    amplitude_mv numeric [note: 'The voltage amplitude of the EIS pulse.']
    amplitude_ma numeric [note: 'The current amplitude of the EIS pulse.']
    intial_frequency_hz numeric [note: 'The starting frequency of the EIS sweep.']
    final_frequency_hz numeric [note: 'The ending frequency of the EIS sweep.']
    steps_per_decade int [note: 'How many EIS measurements to make per decade of the current sweep.']
    current_range text
    current_limit_a text [note: 'The upper current limit of the EIS measurements.']
    data_quality int [note: 'The data quality measurment setting for the Gamry potentiostat.']
    measurement_delay_s numeric [note: 'The delay between EIS measurements.']
    bandwith text [note: 'The bandwidth of the EIS measurements.']
    dc_voltage_v text
    dc_vs_open_circuit text [note: 'The DC vs open circuit value for the EIS measurements.']
    note: "Stores high-level information about the potentiostat test."
}
Table public.hil_data {
    hil_data_id int [pk, not null, increment]
    hil_id int [ref: > public.hil_meta.hil_id]
    cycle "smallint"
    step "smallint"
    step_time_s numeric
    test_time_s numeric
    measured_voltage_mv "smallint"
    modeled_voltage_mv "smallint"
    voltage_delta_mv "smallint"
    measured_current_ma "smallint"
    optimal_current_ma "smallint"
    datetime timestamptz
    unixtime_s numeric
    state text
    overpotential_mv "smallint"
    solution_time_ms "smallint"
    model_states numeric[]
    insert_time timestamptz [not null, default: 'now()']
    note: "Stores test data from hardware-in-the-loop test."
}
Table public.hil_meta {
    hil_id int [pk, not null, increment]
    launched_at timestamptz [not null, default: 'now()']
    status text
    test_name text
    procedure_name text
    configs "jsonb"
    other_details "jsonb"
    note: "Stores high-level information about the hardware-in-the-loop test."
}
Table public.modules {
    module_id int [pk, not null, increment, note: "Unique identifier for the module instance. Auto-incremented upon insertion."]
    moduletype_id int [not null, ref: > public.modules_meta.moduletype_id, note: "Refers to the make of the module defined in modules_meta table."]
    bg_sn text [note: "Internal serial number of the module."]
    manufacture_sn text [note: "Serial number of the module from the manufacturer."]
    batch_number text [note: "The manufacturing batch number for the cell (if available)."]
    label text [note: "Label of the module."]
    date_received date [note: "Date the module was received by lab."]
    date_manufactured date  [note: "Date the module was created by the manufacturer."]
    note: "Stores information for module instances."
}
Table public.modules_meta {
    moduletype_id int [pk, not null, increment, note: "Unique identifier for the module type. Auto-incremented upon insertion."]
    manufacturer text [note: "Manufacturer of the module."]
    manufacturer_pn text [note: "Part number of the module from the manufacturer."]
    capacity_mah int [note: "Rated capacity of the module in mAh."]
    cells_in_series int [note: "Number of cells in series."]
    cells_in_parallel int [note: "Number of cells in parallel."]
    batterytype_id int [ref: > public.cells_meta.cell_type_id, note: "Cells that make up the module. Refers to the cell type defined in cells_meta table."]
    dimensions "hstore" [note: "Physical dimensions of the module. Stored in [hstore data type](https://www.postgresql.org/docs/9.1/hstore.html) that allows for dictionary like behavior. Example for a cylindrical cell: \"height\"=>\"65.00 Â± 0.2 mm\", \"diameter\"=>\"18.3 +0.2 / -0.3 mm\""]
    note: "Stores information about types of module."
}
Table public.modules_test_data {
    modules_testdata_id int [pk, not null, increment, note: "Unique identifier for the module test data point. Auto-incremented upon insertion."]
    module_test_id int [not null, ref: > public.modules_test_meta.module_test_id, note: "Specific module being tested."]
    datetime timestamptz [note: "Date and time (relative to the timezone set on the cycler computer) at the specific sample time."]
    unixtime_s numeric [note: "Date and time converted to unix time (also called 'epoch time') for the specific sample time."]
    cycle "smallint" [note: "Total number of charge/discharge step pairs the schedule file has completed. Can vary depending on the schedule file."]
    tc_counter1 "smallint" [note: "Counter for loops in loops."]
    tc_counter2 "smallint" [note: "Counter for loops in loops."]
    tc_counter3 "smallint" [note: "Counter for loops in loops."]
    tc_counter4 "smallint" [note: "Counter for loops in loops."]
    max_cellvoltage_mv numeric [note: "Cell in module with the highest voltage."]
    min_cellvoltage_mv numeric [note: "Cell in module with the lowest voltage."]
    max_cellvoltage_index "smallint" [note: "Index of cell in module with the highest voltage."]
    min_cellvoltage_index "smallint" [note: "Index of cell in module with the lowest voltage."]
    cell_voltage_delta_mv numeric [note: "Change in voltage from last sample."]
    step "smallint" [note: "The cycle schedule step for the data point."]
    step_time_s numeric [note: "Time ellapsed since the start of the step, not counting pauses."]
    test_time_s numeric [note: "Time ellapsed since the start of the test, not counting pauses."]
    temps_c numeric[] [note: "Temperature of each cell in the module."]
    module_voltage_mv numeric [note: "Voltage of the module. Nominally this is the battery voltage."]
    cell_voltages_mv numeric[] [note: "Voltage of each cell in the module."]
    current_ma numeric [note: "The current sourced (or sunk for discharge) by the cycler at the specific sample time."]
    charge_capacity_mah numeric [note: "The cumulative charge put out by the cycler during charge for the current step."]
    discharge_capacity_mah numeric [note: "The cumulative charge taken in by the cycler during discharge charge  for the current step."]
    charge_energy_mwh numeric [note: "The cumulative energy used by the charger during the current step at the sample time."]
    discharge_energy_mwh numeric [note: "The cumulative energy used by the charger during the current step at the sample time."]
    note: "Stores test data for tests performed using modules."
}
Table public.modules_test_data_cycle_stats {
    modules_cyclestats_id int [pk, not null, increment, note: "Unique identifier for the module cycle stats data point. Auto-incremented upon insertion."]
    module_test_id int [not null, ref: > public.modules_test_meta.module_test_id, note: "Test data that stats are being calculated from. Refers to the module_test_id in modules_test_meta table."]
    datetime timestamptz [note: "Date and time (relative to the timezone set on the cycler computer) at the specific sample time."]
    unixtime_s numeric [note: "Date and time converted to unix time (also called 'epoch time') for the specific sample time."]
    cycle "smallint" [note: "Total number of charge/discharge step pairs the schedule file has completed. Can vary depending on the schedule file."]
    test_time_s numeric [note: "Time ellapsed since the start of the test, not counting pauses."]
    capacity_charge_mah numeric [note: "The cumulative charge put out by the cycler during charge for the current step."]
    capacity_discharge_mah numeric [note: "The cumulative charge taken in by the cycler during discharge charge  for the current step."]
    coulombic_efficiency numeric [note: "Calculated ratio of discharge capacity to charge capacity for the current step."]
    total_cycle_chargetime_s numeric [note: "Total time spent charging during the current cycle."]
    cc_cycle_chargetime_s numeric [note: "Time (in seconds) spent charging during the constant current portion of the current cycle."]
    cv_cycle_chargetime_s numeric [note: "Time (in seconds) spent charging during the constant voltage portion of the current cycle."]
    max_temp_charge_c numeric [note: "Maximum temperature (in Celsius) of the module during charge for the current cycle."]
    max_temp_discharge_c numeric [note: "Maximum temperature (in Celsius) of the module during discharge for the current cycle."]
    cycler_charge_capacity_mah numeric [note: "The cumulative charge (reported by cycler) put out during charge for the current cycle."]
    cycler_discharge_capacity_mah numeric [note: "The cumulative charge (reported by cycler) taken in during discharge charge for the current cycle."]
    cycler_coulombic_efficiency numeric [note: "The coulombic efficiency (reported by cycler) for the current cycle."]
    cycler_charge_time_s numeric [note: "The total time in seconds (reported by cycler) spent charging during the current cycle."]
    cycler_discharge_time_s numeric [note: "The total time in seconds (reported by cycler) spent discharging during the current cycle."]
    cycler_charge_energy_mwh numeric [note: "The cumulative energy (reported by cycler) used during charge for the current cycle."]
    cycler_discharge_energy_mwh numeric [note: "The cumulative energy (reported by cycler) used during discharge for the current cycle."]
    maxtemp_rpt_charge_c numeric 
    maxtemp_rpt_discharge_c numeric
    capacity_rpt_charge_mah numeric
    capacity_rpt_discharge_mah numeric
    cc_capacity_mah numeric [note: "The cumulative charge put out by the cycler during the constant current position of charge for the current cycle."]
    cv_capacity_mah numeric [note: "The cumulative charge put out by the cycler during the constant voltage position of charge for the current cycle."]
    max_charge_cellvoltage_delta_mv numeric
    min_charge_cellvoltage_mv numeric
    note: "Stores summary statistics for each cycle of a test performed using modules."
}
Table public.modules_test_meta {
    module_test_id int [pk, not null, increment, note: "Unique identifier for the module test. Auto-incremented upon insertion."]
    module_id int [not null, ref: > public.modules.module_id, note: "The specific module being tested. References the module_id in the modules table."]
    schedule_id int [not null, ref: > public.schedule_meta.schedule_id, note: "The schedule file used for the test. References the schedule_id in the schedule_meta table."]
    test_name text [not null, note: "The name of the specific test used in cycler software. Typically BG_Customer_CellType_TestType_CellLabel_Take#."]
    start_date date [note: "The date the test was started."]
    end_date date [note: "The date the test finished."]
    channel int [note: "The cycler channel the test was ran on."]
    column_decoder "hstore"
    project_id int [ref: > public.projects.project_id, note: "The project the test is associated with. References the project_id in the projects table."]
    temp_sensor_meta text[]
    cycler_id int[] [note: "The cycler the test was ran on. References the cycler_id in the cyclers table."]
    note: "Stores high-level information about tests performed using modules."
}
Table public.potentiostats {
    potentiostat_id int [pk, not null, increment, note: 'Unique identifier for the potentiostat instance. Auto-incremented upon insertion.']
    potentiostattype_id int [ref: > public.potentiostats_meta.potentiostattype_id]
    sn text [note: 'The serial number of the potentiostat.']
    calibration_date date [note: 'The date the potentiostat was last calibrated.']
    calibration_due_date date [note: 'The date the potentiostat is due to be calibrated.']
    note: "Stores information about potentiostat instance."
}
Table public.potentiostats_meta {
    potentiostattype_id int [pk, not null, increment, note: 'Unique identifier for potentiostat type. Auto-incremented upon insertion.']
    manufacturer text [note: 'The manufacturer of the potentiostat.']
    model text [note: 'The model of the potentiostat.']
    datasheet text
    note: "Stores information about type of potentiostat."
}
Table public.profiles_meta {
    profile_id int [pk, not null, increment, note: 'Unique identifier for the profile. Auto-incremented upon insertion.']
    batterytype_id int [not null, ref: > public.cells_meta.cell_type_id, note: 'The type of battery the profile is for. References the cell_type_id in the cells_meta table.']
    author text [note: 'The person who created the profile.']
    date_created date [note: 'The date the profile was created.']
    profile_name text [note: 'The name of the profile.']
    note: "Stores information about charge profiles used in schedules."
}
Table public.projects {
    project_id int [pk, not null, increment, note: "Unique identifier for the project. Auto-incremented upon insertion."]
    project_name text [note: "The name of the project."]
    customer_id int [ref: > public.customers.customer_id, note: "The customer the project is associated with. References the customer_id in the customers table."]
    note: "Tracks projects associated with a customer. [audited]"
}
Table public.schedule_meta {
    schedule_id int [pk, not null, increment, note: "Unique identifier for the schedule file. Auto-incremented upon insertion."]
    schedule_name text [unique, note: "The name of the schedule file used in cycler software."]
    test_type text [note: "The type of test performed, e.g. ICT, Characterization, Baseline, Profile Testing."]
    cycler_make text [note: "The make of the cycler schedule is written for, e.g. Arbin or Maccor."]
    date_created date [note: "Date schedule file was created. Not necessarily the date the test was ran."]
    created_by text [note: "The person who created the schedule file."]
    comments text [note: "Any comments regarding the schedule file."]
    cv_voltage_threshold_mv int [note: "The voltage threshold (in mV) used to determine when to switch from constant current to constant voltage during charge."]
    schedule_files text [note: "The schedule files used in the test. .sdx for Arbin and .000 for Maccor."]
    note: "Stores high-level information about schedule files. [audited]"
}
Table public.sil_data {
    sil_data_id int [pk, not null, increment, note: "Unique identifier for the SIL data point. Auto-incremented upon insertion."]
    sil_id int [ref: > public.sil_meta.sil_id]
    test_data_id int
    cycle "smallint" [note: "The cycle number of the data point. Tracks number of charge/discharge cycles."]
    test_time_s numeric [note: "The time in seconds since the start of the test, ignoring pauses."]
    measured_voltage_mv "smallint" [note: "The voltage measured by the cycler during the data point."]
    modeled_voltage_mv "smallint" [note: "The voltage predicted by the model during the data point."]
    voltage_delta_mv "smallint" [note: "The difference between the measured and modeled voltage during the data point."]
    measured_current_ma "smallint" [note: "The current measured by the cycler during the data point."]
    overpotential_mv "smallint" 
    solution_time_ms "smallint"
    insert_time timestamptz [default: 'now()']
    modeled_current_ma "smallint"
    model_states numeric[]
    note: "Stores model outputs and test data from software-in-the-loop testing."
}
Table public.sil_meta {
    sil_id int [pk, not null, increment, note: "Unique identifier for the SIL test. Auto-incremented upon insertion."]
    launched_at timestamptz [default: 'now()']
    user_id text [not null]
    status text
    batterytype_id int [ref: > public.cells_meta.cell_type_id]
    test_id int [ref: > public.test_meta.test_id]
    silstreamer_config "jsonb"
    model_config "jsonb"
    note: "Stores high-level information about software-in-the-loop tests. [audited]"
}
Table public.test_data {
    test_data_id int [pk, not null, increment, note: "Unique identifier for the test data point. Auto-incremented upon insertion."]
    test_id "smallint" [not null, ref: > public.test_meta.test_id, note: "The specific test the data point is associated with. References the test_id in the test_meta table."]
    cycle "smallint" [note: "The cycle number of the data point. Tracks number of charge/discharge cycles."]
    step "smallint" [note: "Schedule step associated with the data point."]
    test_time_s numeric [note: "The time in seconds since the start of the test, ignoring pauses."]
    step_time_s numeric [note: "The time in seconds since the start of the step, ignoring pauses."]
    current_ma numeric [not null, note: "The current sourced (or sunk) by the cycler at the specific sample time. Positive for charge, negative for discharge."]
    voltage_mv numeric [not null, note: "The voltage measured by the cycler at the specific sample time."]
    recorded_datetime timestamptz [not null, note: 'The date and time the data point was recorded by cycler. Matches timezone of cycler.']
    unixtime_s numeric [not null, note: "The time in seconds since the Unix epoch (January 1, 1970). Calculated from recorded_datetime."]
    thermocouple_temps_c numeric[] [note: "The temperature (in Celsius) of each thermocouple. Usually T1 is chamber temperature and T2 is cell temperature."]
    other_details "jsonb" [note: "Contains data for auxillary measurements."]
    note: "Stores test data for tests performed on single cells."
}
Table public.test_data_cycle_stats {
    cycle_stats_id int [pk, not null, increment, note: "Unique identifier for the test data cycle stats. Auto-incremented upon insertion."]
    test_id "smallint" [ref: > public.test_meta.test_id, note: "The specific test the data point is associated with. References the test_id in the test_meta table."]
    cycle "smallint" [note: "The cycle number of the data point. Tracks number of charge/discharge cycles."]
    test_time_s int [note: "The time in seconds since the start of the test, ignoring pauses."]
    reported_charge_capacity_mah numeric [note: "The charge capacity reported by the cycler at the end of the cycle."]
    reported_discharge_capacity_mah numeric [note: "The discharge capacity reported by the cycler at the end of the cycle."]
    reported_charge_energy_mwh numeric [note: "The charge energy reported by the cycler at the end of the cycle."]
    reported_discharge_energy_mwh numeric [note: "The discharge energy reported by the cycler at the end of the cycle."]
    calculated_charge_capacity_mah numeric [note: "The charge capacity at the end of the cycle. Calculated from test_data Table values by battetl. Should be the same as reported_charge_capacity_mah."]
    calculated_max_charge_temp_c numeric [note: "The maximum temperature during the charge step of the cycle. Calculated from test_data table values by battetl."]
    calculated_discharge_capacity_mah numeric [note: "The discharge capacity at the end of the cycle. Calculated from test_data table values by battetl. Should be the same as reported_discharge_capacity_mah."]
    calcualated_max_discharge_temp_c numeric [note: "The maximum temperature during the discharge step of the cycle. Calculated from test_data table values by battetl."]
    calculated_cc_charge_time_s numeric [note: "The time in seconds spent in the constant current charge step of the cycle. Calculated from test_data table values by battetl."]
    calculated_cv_charge_time_s numeric [note: "The time in seconds spent in the constant voltage charge step of the cycle. Calculated from test_data table values by battetl."]
    calculated_cc_capacity_mah numeric [note: "The capacity in mAh delivered during the constant current charge step of the cycle. Calculated from test_data table values by battetl."]
    calculated_cv_capacity_mah numeric [note: "The capacity in mAh delivered during the constant voltage charge step of the cycle. Calculated from test_data table values by battetl."]
    calculated_coulombic_efficiency numeric [note: "Ratio of discharge capacity to charge capacity for cycle. Calculated from test_data table values by battetl."]
    reported_coulombic_efficiency numeric [note: "Ratio of discharge capacity to charge capacity for cycle. Reported by cycler."]
    reported_charge_time_s numeric [note: "The time in seconds spent in the charge step of the cycle. Reported by cycler."]
    reported_discharge_time_s numeric [note: "The time in seconds spent in the discharge step of the cycle. Reported by cycler."]
    calculated_fifty_percent_charge_time_s numeric [note: "The time in seconds to reach 50% of the final charge capacity for cycle. Calculated from test_data table values by battetl."]
    calculated_eighty_percent_charge_time_s numeric [note: "The time in seconds to reach 80% of the final charge capacity for cycle. Calculated from test_data table values by battetl."]
    calculated_charge_energy_mwh numeric [note: "The charge energy at the end of the cycle. Calculated from test_data table values by battetl. Should be the same as reported_charge_energy_mwh."]
    calculated_discharge_energy_mwh numeric [note: "The discharge energy at the end of the cycle. Calculated from test_data table values by battetl. Should be the same as reported_discharge_energy_mwh."]
    other_details "jsonb" [note: "Contains data for auxillary measurements."]
    note: "Stores summary statistics for each cycle for tests performed on single cells."
}
Table public.test_meta {
    test_id int [pk, not null, increment, note: "Unique identifier for the test. Auto-incremented upon insertion."]
    cell_id "smallint" [ref: > public.cells.cell_id, note: "Specific cell being tested. References the cell_id in the cells table."]
    schedule_id "smallint" [ref: > public.schedule_meta.schedule_id , note: "Schedule file used in the test. References the schedule_id in the schedule_meta table."]
    test_name text [note: "Name of the test in cycling software."]
    start_date date [note: "Date the test was started. Populated manually in config file."]
    end_date date [note: "Date the test was ended. Populated manually in config file."]
    channel "smallint" [note: "Cycler channel the test was run on."]
    ev_chamber "smallint" [note: "The environmental chamber the test was run in."]
    ev_chamber_slot "smallint" [note: "The slot in the environmental chamber the test was run in."] 
    thermocouples "smallint" [note: "Specific thermocouple attached to the cell being tested."]
    thermocouple_channels "smallint" [note: "Channel the thermocouple is attached to."]
    comments text [note: "Additional info about the test."]
    project_id int [ref: > public.projects.project_id, note: "Project the test is associated with. References the project_id in the projects table."]
    test_capacity_mah int [note: "Rated capacity of the cell being tested."]
    potentiostat_id int[]
    cycler_id int [ref: > public.cyclers.cycler_id, note: "Cycler the test was run on. References the cycler_id in the cyclers table."]
    note: "Contains high-level information about tests on single cells. [audited]"
}

Table audit.loged_actions{
    event_id int8 [pk, unique, not null, increment, note: "Unique identifier for the event. Auto-incremented upon insertion."]
    schema_name text [not null, note: "Name of the schema the event occured in."]
    table_name text [not null, note: "Name of the table the event occured in."]
    relid "oid" [not null]
    session_user_name text [note: "User that performed the action."]
    action_tstamp_tx timestamptz [not null] 
    action_tstamp_stm timestamptz [not null]
    action_tstamp_clk timestamptz [not null]
    transaction_id int8
    application_name text
    client_addr "inet"
    client_port int4
    client_query text
    action text [not null]
    row_data "hstore"
    changed_fields "hstore"
    statement_only bool [not null]
    note: "Stores the actions performed on the database."
}
Table audit.profile_pipeline_log{
    profile_log_id int4 [pk, unique, not null, increment, note: "Unique identifier for the profile log. Auto-incremented upon insertion."]
    profile_id int2
    file_name text
    timestamp timestamp
    db_user text
    user_ip text
    fail_step text
}
Table audit.schedule_pipeline_log {
    schedule_log_id int4 [pk, unique, not null, increment, note: "Unique identifier for the schedule log. Auto-incremented upon insertion."]
    schedule_id int2
    file_name text
    timestamp timestamp
    db_user text
    user_ip text
    fail_step text
}
Table audit.testdata_manual_log{
    testdata_log_id int4 [pk, unique, not null, increment, note: "Unique identifier for the testdata manual log. Auto-incremented upon insertion."]
    test_id int2
    schedule_id int2
    data_name text
    timestamp timestamp
    db_user text
    user_ip text
    fail_step text
    comments text
    data_type text
}
Table audit.testdata_pipeline_log{
    testdata_log_id int4 [pk, unique, not null, increment, note: "Unique identifier for the testdata pipeline log. Auto-incremented upon insertion."]
    test_id int2
    schedule_id int2
    data_name text
    timestamp timestamp
    db_user text
    user_ip text
    fail_step text
    data_type text
}
Table audit.validation{
    validation_id int4 [pk, unique, not null, increment, note: "Unique identifier for the validation. Auto-incremented upon insertion."]
    validation_instance_id int4 [not null, ref: > audit.validation_meta.validation_instance_id, note: "Unique identifier for the validation instance. Auto-incremented upon insertion."]
    cycle int4
    step int4
    row int4
    error text
    error_criticality text
}
Table audit.validation_meta{
    validation_instance_id int4 [pk, not null, unique, increment, note: "Unique identifier for the validation instance. Auto-incremented upon insertion."]
    cell_id int4 [not null, ref: > public.cells.cell_id]
    test_id int4 [not null, ref: > public.test_meta.test_id]
    schedule_id int4 [not null, ref: > public.schedule_meta.schedule_id]
    timestamp timestamp
    validation_code_version text
    db_user text
    validation_success bool
    num_errors int4
    num_unique_errors int4
    user_ip "inet"
    run_time_s numeric
    criticality_flag bool
}
